Solutions mises en œuvre et justification :
-	Génération des clés
-	Signature DSA
-	x3dh
Pour mettre en œuvre l'échange de clé X3DH, un des utilisateurs inities l'échange en récupérant sur le serveur les clés publiques de l'autre utilisateur (ici Bob) et génère des clés éphémères avec la fonction gen_key_pair. Il peut alors calculer la clé partagé SK. Afin que Bob puisse également calculer la clé partagée, Alice publie sur le serveur les informations nécessaires qui sont ensuite récupérées puis effacées du serveur par Bob (fonction get_x3dh_info). A la fin de l'initialisation Alice et Bob obtienne le meme SK qui sera utilisé comme seed pour le ratchet racine.

-	Double ratchet
Pour la mise en place du double ratchet symétrique à clé publique, Alice et Bob initie tout d’abord un rootRatchet avec comme clé initiale la clé partagée SK. Puis il initie leurs sendRatchet et receivRatchet en « tournant » le rootRatchet pour obtenir les clés initiales. 
Ensuite un couple de clé RPrivKey et RpubKey et généré pour chaque utilisateur enfin qu’une clé partagée puisse etre calculée à chaque échange de messages afin de servir d’input au ratchet d’envoi et de réception.
Pour la KDF, il a été choisi d'utiliser le hmac_sha256 (comme dans le protocol signal). Cette fonction n'a pas été implémentée. Ainsi pour cela la bibliothèque HMAC est utilisée. Cela permet d’obtenir en sortie le hash en fournissant une clé secrète et un message.

-	Chiffrement fichier
Pour le chiffrement de bloc, il a été choisi d'effectuer un chiffrement par bloc de Feistel en mode CBC. Appliqué en divisant le message à encoder en blocs de 64 bits et en appliquant 8 tournées de Feistel sur chaque bloc. Le mode CBC est utilisé pour ne pas obtenir le même chiffré pour un même bloc.
La mise en œuvre est la suivante :
La clé obtenue via l’algorithme de double ratchet (512 bits) est convertie en binaire.
Pour l'utilisation on divisera cette clé binaire de cette façon :
Bits de 0 à 256 : clé de chiffrement pour Feistel
Bits de 256 à 320 : IV pour le mode CBC
Bits de 320 à 512 : clé pour l’authentification HMAC
Le contenu du fichier à envoyer est converti également en binaire et divisé en bloc de 64 bits. La clé est également divisée en 8 sous-clés (une pour chaque tournée). On utilise pour fonction de Feistel une fonction xor. Le résultat chiffré est converti en hexadécimal pour pouvoir etre inscrit dans un fichier et publié sur le serveur. De cette façon l'utilisateur a qui est destiné le message peut récupérer sur le serveur le message et le HMAC correspondant. Il peut ainsi effectuer les opérations inverses, vérifier l'authenticité du message et obtenir le fichier.

-	Chiffrement flux

Difficultés rencontrées :
generation des clés
Une autre difficulté que nous avons rencontrée concerne le chiffrement de fichier. En effet nous n’avons réussi à l’appliquer qu’à des fichiers texte car nous avons rencontrés des difficultés à lire d’autre type de fichier (par exemple image) à cause de l’encodage.

Axes d’amélioration :
Un axe d'amélioration possible est d'ajouter un numéro de séquence afin de pouvoir envoyer plusieurs messages et de pouvoir les décoder dans l'ordre à la réception. De plus l’implémentation de la fonction d’authentification (+KDF) HMAC ainsi que de la fonction cryptographique de hachage sha-256 serait également une amélioration possible.


Sources:
https://lianglouise.github.io/post/some_practice_on_implementing_signal_protocol_with_python_1/ 
https://nfil.dev/coding/encryption/python/double-ratchet-example/ 
https://www.gauravvjn.com/generate-hmac-sha256-signature-in-python/ 
https://github.com/conor-deegan/sandbox/blob/6a657b1938a4495eb38287be56cfeb64a2016ef2/feistel-network/feistel.py#L85 
