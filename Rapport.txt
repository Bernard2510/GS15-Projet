Solutions mises en œuvre et justification :
-	Génération des clés
-	Signature DSA
-	x3dh
Pour mettre en oeuvre l'échange de clé x3dh, un des utilisateurs inities l'échange en récupérant sur le serveur les clés publiques de l'autre utilisateur ici Bob et génère des clés éphémères avec la fonction gen_key_pair.
Il peut alors calculer la clé partagé SK. Enfin que Bob puisse également calculer la clé partagé. Pour cela Alice publie sur le serveur les informations nécessaire qui sont récupérée et effacer du serveur par Bob (fonction get_x3dh_info)

-	Double ratchet
Pour la KDF il a été choisi d'utiliser le hmac_sha256 (comme dans le protocol signal). Cette focntion n'a pas été implémentée.
Ainsi pour cela la bibliothèque hmac est utilisée, on obtient une signature hmac en fournissant byte_key, un message.

-	Chiffrement fichier
Pour le chiffrement de bloc, il a été choisit d'effectuer un chiffrement par bloc de fesitel en mode CBC.
Avec des blocs de 64 bits et 8 tournées de Feistel sur chaque bloc.
CBC pour ne pas obtenir le même chiffré pour un même bloc.
La mise en oeuvre est la suivante :
La clé obtenu via le double ratchet (512 bits) est convertie en binaire.
Pour l'utilisation on divisera cette clé binaire de cette facon
bits de 0 à 256 : clé de chiffrement pour feistel
bits de 256 à 320 : IV pour le mode CBC
bits de 320 à 512 : clé pour la signature hmac

Le contenu du fichier à envoyer est converti également en binaire et divisé en bloc de 64 bits
La clé est également divisé en 8 sous-clés (une pour chaque tournée)
Avec pour fonction de fesitel un xor.
Le résultat chiffré est converti en hexadécimal pour pouvoir etre inscrit dans un fichier et publié sur le serveur.
De cette facon l'utilisateur a qui est destine le message peut récupérer sur le serveur le message et la signature hmac correspondante.
Il peut ainsi effectuer les opérations inverses, vérifier l'authenticité du message et obtenir le fichier.

-	Chiffrement flux

Difficultés rencontrées :
generation des clés
chiffrement de feistel ne prend en compte que les fichiers texte (a cause encodage)

Axes d’amélioration :
Un axe d'amélioration aurait été d'ajouter un numéro de séquence afin de pouvoir envoyer plusieurs messages et de pouvoir les décoder dans l'ordre à la réception.


Sources:
https://lianglouise.github.io/post/some_practice_on_implementing_signal_protocol_with_python_1/
https://nfil.dev/coding/encryption/python/double-ratchet-example/
https://www.gauravvjn.com/generate-hmac-sha256-signature-in-python/
https://github.com/conor-deegan/sandbox/blob/6a657b1938a4495eb38287be56cfeb64a2016ef2/feistel-network/feistel.py#L85
